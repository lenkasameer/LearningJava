A class which is declared with the abstract keyword is known as an abstract class in Java. It can have abstract and non-abstract methods (method with the body).

Before learning the Java abstract class, let's understand the abstraction in Java first.

Abstraction is a process of hiding the implementation details and showing only functionality to the user.

Another way, it shows only essential things to the user and hides the internal details, for example, sending SMS where you type the text and send the message. You don't know the internal processing about the message delivery.


Abstraction lets you focus on what the object does instead of how it does it.

Ways to achieve Abstraction
There are two ways to achieve abstraction in java

Abstract class (0 to 100%)
Interface (100%)

Abstract class in Java
A class which is declared as abstract is known as an abstract class. It can have abstract and non-abstract methods. It needs to be extended and its method implemented. It cannot be instantiated.

Points to Remember
An abstract class must be declared with an abstract keyword.
It can have abstract and non-abstract methods.
It cannot be instantiated.
It can have constructors and static methods also.
It can have final methods which will force the subclass not to change the body of the method.

Example of abstract class -
abstract class A{}

Abstract Method in Java
A method which is declared as abstract and does not have implementation is known as an abstract method.

Example of abstract method -

abstract void printStatus();//no method body and abstract


Example of Abstract class that has an abstract method
In this example, Bike is an abstract class that contains only one abstract method run. Its implementation is provided by the Honda class.

abstract class Bike{
  abstract void run();
}
class Honda4 extends Bike{
void run(){System.out.println("running safely");}
public static void main(String args[]){
 Bike obj = new Honda4();
 obj.run();
}
}

if you run the above code the output is -
running safely

Abstract class having constructor, data member and methods
An abstract class can have a data member, abstract method, method body (non-abstract method), constructor, and even main() method.

File: TestAbstraction2.java

//Example of an abstract class that has abstract and non-abstract methods
 abstract class Bike{
   Bike(){System.out.println("bike is created");}
   abstract void run();
   void changeGear(){System.out.println("gear changed");}
 }
//Creating a Child class which inherits Abstract class
 class Honda extends Bike{
 void run(){System.out.println("running safely..");}
 }
//Creating a Test class which calls abstract and non-abstract methods
 class TestAbstraction2{
 public static void main(String args[]){
  Bike obj = new Honda();
  obj.run();
  obj.changeGear();
 }
}
output -
       bike is created
       running safely..
       gear changed
Rule: If there is an abstract method in a class, that class must be abstract.
class Bike12{
abstract void run();

output -
Compile Time error




--------------------------------------------

An abstract class may or may not have abstract methods.

It is important to note that you do not need to have only abstract methods in an abstract class. You can have non-abstract methods in it as well.



So, in order to declare the Shape class as abstract, the syntax is as follows:


public abstract class Shape {
   public abstract float area ( ); // abstract methods
   public abstract float perimeter( );
   public void resize ( float newWidth, float newHeight) // non-abstract method
   {
      System.out.println("New width and height are : " + newWidth + "," + newHeight);
   }
}


It is important to note that you cannot create instances of an abstract class. You can only inherit from an abstract class. Therefore, in order to use the abstract class Shape, the Rectangle class can extend it as follows:



public class Rectangle extends Shape {
   // some code here
   public float area() {
     // implementation of the area() method
   }

   public float perimeter() {
     // implementation of the perimeter() method
   }
}


Remember that an abstract method should not be final. The whole purpose of declaring an abstract method is that the method can be used later in a subclass. You know that a final method cannot be overridden. So, if you define an abstract method as final, you will not be able to override it in any subclass. This defeats the purpose of declaring a method an abstract one in the first place.

Final methods cannot be overriden , So never declare abstract method as final. So the below
code will throw compilation error.

abstract class demo
{
    public int a;
    demo()
    {
        a = 10;
    }

    abstract public void set(int a);

    abstract final public void get();   //   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

}

class Test extends demo
{

    public void set(int a)
    {
        this.a = a;
    }

    final public void get()                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    {
        System.out.println("a = " + a);
    }

}
